{
	"name": "TransformCustomerData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "transactions",
						"type": "DatasetReference"
					},
					"name": "transactions"
				},
				{
					"dataset": {
						"referenceName": "survey_data",
						"type": "DatasetReference"
					},
					"name": "marketResearchData"
				},
				{
					"dataset": {
						"referenceName": "interactions",
						"type": "DatasetReference"
					},
					"name": "interactions"
				},
				{
					"dataset": {
						"referenceName": "customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "joinedTables",
						"type": "DatasetReference"
					},
					"name": "loadAsFileToDataLake"
				},
				{
					"dataset": {
						"referenceName": "transactionsSink",
						"type": "DatasetReference"
					},
					"name": "copyToAnalytics"
				}
			],
			"transformations": [
				{
					"name": "anonymizeCustomers"
				},
				{
					"name": "joinCustomers"
				},
				{
					"name": "removeComment"
				},
				{
					"name": "selectNecassaryColumns"
				},
				{
					"name": "addActive"
				},
				{
					"name": "joinInteractions"
				},
				{
					"name": "updateActive",
					"description": "update Active column based on if customer interacted lately"
				},
				{
					"name": "addSurveyData"
				},
				{
					"name": "removeNullFromActive"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TransactionID as integer,",
				"          CustomerID as integer,",
				"          TransactionDate as string,",
				"          Amount as double,",
				"          Category as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> transactions",
				"source(output(",
				"          SurveyID as integer,",
				"          CustomerID as integer,",
				"          SatisfactionScore as integer,",
				"          RecommendationLikelihood as integer,",
				"          Comments as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> marketResearchData",
				"source(output(",
				"          CustomerID as integer,",
				"          InteractionDate as timestamp,",
				"          Channel as string,",
				"          InteractionType as string,",
				"          ResolutionTime as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> interactions",
				"source(output(",
				"          CustomerID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          Phone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"customers select(mapColumn(",
				"          CustomerID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> anonymizeCustomers",
				"transactions, anonymizeCustomers join(transactions@CustomerID == anonymizeCustomers@CustomerID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCustomers",
				"marketResearchData select(mapColumn(",
				"          SurveyID,",
				"          CustomerID,",
				"          SatisfactionScore,",
				"          RecommendationLikelihood",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeComment",
				"addActive select(mapColumn(",
				"          CustomerID = anonymizeCustomers@CustomerID,",
				"          Active",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectNecassaryColumns",
				"joinCustomers derive(Active = iif(isNull(TransactionID), false(), true())) ~> addActive",
				"selectNecassaryColumns, interactions join(selectNecassaryColumns@CustomerID == interactions@CustomerID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinInteractions",
				"joinInteractions derive(Active = iif((isNull(Active) || Active == false()) && !isNull(InteractionDate), true(), Active)) ~> updateActive",
				"updateActive, removeComment join(selectNecassaryColumns@CustomerID == removeComment@CustomerID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> addSurveyData",
				"addSurveyData derive(Active = iif(isNull(Active), false(), Active)) ~> removeNullFromActive",
				"removeNullFromActive sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     partitionFileNames:['gathered_customer_data.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> loadAsFileToDataLake",
				"transactions sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['transactions_for_analytics.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> copyToAnalytics"
			]
		}
	}
}