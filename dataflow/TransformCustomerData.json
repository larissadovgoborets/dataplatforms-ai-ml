{
	"name": "TransformCustomerData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "transactions",
						"type": "DatasetReference"
					},
					"name": "transactions"
				},
				{
					"dataset": {
						"referenceName": "survey_data",
						"type": "DatasetReference"
					},
					"name": "surveyData"
				},
				{
					"dataset": {
						"referenceName": "interactions",
						"type": "DatasetReference"
					},
					"name": "interactions"
				},
				{
					"dataset": {
						"referenceName": "customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "joinedTables",
						"type": "DatasetReference"
					},
					"name": "joinedTables"
				}
			],
			"transformations": [
				{
					"name": "anonymizeCustomers"
				},
				{
					"name": "cutomersInteractions"
				},
				{
					"name": "customersInteractionsSurvey"
				},
				{
					"name": "removeObsoleteColumns"
				},
				{
					"name": "typecastedColumns",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TransactionID as integer,",
				"          CustomerID as integer,",
				"          TransactionDate as string,",
				"          Amount as double,",
				"          Category as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> transactions",
				"source(output(",
				"          SurveyID as string,",
				"          CustomerID as string,",
				"          SatisfactionScore as string,",
				"          RecommendationLikelihood as string,",
				"          Comments as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> surveyData",
				"source(output(",
				"          CustomerID as string,",
				"          InteractionDate as string,",
				"          Channel as string,",
				"          InteractionType as string,",
				"          ResolutionTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> interactions",
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          Phone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"customers select(mapColumn(",
				"          CustomerID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> anonymizeCustomers",
				"anonymizeCustomers, interactions join(anonymizeCustomers@CustomerID == interactions@CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> cutomersInteractions",
				"cutomersInteractions, surveyData join(anonymizeCustomers@CustomerID == surveyData@CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> customersInteractionsSurvey",
				"customersInteractionsSurvey select(mapColumn(",
				"          CustomerID = anonymizeCustomers@CustomerID,",
				"          InteractionDate,",
				"          Channel,",
				"          InteractionType,",
				"          ResolutionTime,",
				"          SurveyID,",
				"          SatisfactionScore,",
				"          RecommendationLikelihood",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeObsoleteColumns",
				"removeObsoleteColumns derive(CustomerID = toInteger(CustomerID),",
				"          ResolutionTime = toInteger(ResolutionTime),",
				"          SatisfactionScore = toInteger(SatisfactionScore),",
				"          RecommendationLikelihood = toInteger(RecommendationLikelihood),",
				"          SurveyID = toInteger(SurveyID),",
				"          InteractionDate = toTimestamp(InteractionDate)) ~> typecastedColumns",
				"typecastedColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> joinedTables"
			]
		}
	}
}